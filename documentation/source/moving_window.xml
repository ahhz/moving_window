<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library PUBLIC "-//XMLmind//DTD BoostBook V1.1//EN"
"http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<library dirname="any" id="any"
         last-revision="$Date: 2008-07-12 20:16:17 +0100 (Sat, 12 Jul 2008) $"
         name="Any">
  <libraryinfo>
    <author>
      <firstname><replaceable>Alex Hagen-Zanker</replaceable></firstname>
    </author>

    <librarypurpose>Moving window analysis on raster datasets</librarypurpose>

    <librarycategory name="category:data-structures">C++11</librarycategory>
  </libraryinfo>

  <title><replaceable>Moving Window</replaceable></title>

  <section>
    <title>Introduction</title>

    <para>Moving window analysis is commonly seen as a useful means of
    achieving scale-sensitive geographical analysis. The implementation of
    efficient moving window analysis is not trivial however and computational
    difficulties may be a hurdle to actual moving window applications. The
    Moving Window library removes much of the overhead and offers
    <emphasis>generic moving window analysis</emphasis>. With a relatively
    small effort, users should be able to apply moving window analysis for a
    number of built-in indicators or develop and apply custom moving window
    indicators. At the moment the documentation is limited to the use of
    built-in indicators, please contact the author if you are trying to
    develop your own.</para>

    <para><emphasis>Note:</emphasis> This is not a Boost library or intended
    to become one, I am just trying to use the tools recommended on the <ulink
    url="http://http://rrsd.com/blincubator.com/">Boost Library
    Incubator</ulink>.</para>
  </section>

  <section>
    <title>Motivating Example</title>

    <para>The following is an example of a program making use of the built-in
    edge-density indicator:</para>

    <programlisting>
#include &lt;moving_window/indicator/edge_density.h&gt;
#include &lt;moving_window/moving_window_view.h&gt;
#include &lt;moving_window/utility.h&gt;
#include &lt;moving_window/window.h&gt;
#include &lt;moving_window/zip_range.h&gt;
#include &lt;functional&gt;
#include &lt;tuple&gt;

using namespace moving_window;

int main()
{
  double radius = 40;

  // open a raster data set
  auto input = open_gdal_raster&lt;int&gt;("input.tif", GA_ReadOnly);

  // create a raster data set, with same dimensions as input
  auto output = create_gdal_raster_from_model&lt;double&gt;("output.tif", input);

  // specify and create the window to use
  auto window = make_square_window(radius);

  // Create a range over the windowed indicator for all pixels
  auto window_view = make_moving_window_view(edge_density_tag(), window, &amp;amp;input);

  // Create a range to simultaneously iterate over output and window_view
  auto zip = make_zip_range(std::ref(output), std::ref(window_view));

  // extract the indicator value for each pixel and assign to output
  for (auto&amp; i : zip) {
    auto&amp; output_i = std::get&lt;0&gt;(i);
    auto&amp; window_i = std::get&lt;1&gt;(i);
    output_i = window_i.extract().get();
  }
  return 0;
}
</programlisting>

    <para>The central element of the example is the window_view; this is a
    range that allows iterating over all pixel locations in the raster
    dataset. However, instead of giving access to the pixel values it gives
    access to the indicator that summarizes the window surrounding the pixel.
    At each iteration step the window moves along with the pixel.</para>

    <para>The zip range makes it possible to iterate simultaneously over both
    the output dataset and the moving window view of the input data set. Thus
    at each step we can extract the indicator value and assign it to the
    corresponding pixel in the output raster.</para>

    <para>The<code> extract()</code> member function of the <code>window_view
    </code>returns the indicator associated with
    <code>edge_density_tag</code>, in this case for the square window with a
    radius of 40 pixels. The additional <code>get()</code> is necessary
    because the return type of <code>extract()</code> is a
    <code>boost::optional</code>).</para>
  </section>

  <section>
    <title>Installation</title>

    <para>The Moving Window library is header only, but depends on BOOST
    (<ulink url="http://www.boost.org">www.boost.org</ulink>) and GDAL (<ulink
    url="http://www.gdal.org">www.gdal.org</ulink>) that do require building
    and installation; follow the instructions on the respective web pages. Key
    libraries within BOOST that are used are File System, Iterator, Optional
    and Property Map. The version of BOOST that is used is 1.57, the version
    of GDAL is 1.10.1.</para>

    <para>The library makes use of C++11 language and standard library
    features. These are not yet universally supported. The suggested platform
    is Microsoft Visual Studio 2013.</para>
  </section>

  <section>
    <title>Concepts</title>

    <xi:include href="concept_moving_window_view.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <xi:include href="concept_indicator.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <xi:include href="concept_raster.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <xi:include href="concept_window.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>
  </section>

  <section>
    <title>Types</title>

    <xi:include href="type_gdal_raster.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <xi:include href="type_zip_range.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>
  </section>

  <section>
    <title>Functions</title>

    <xi:include href="supported_datatypes_for_raster_creation.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <xi:include href="function_open_gdal_raster.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <xi:include href="function_create_gdal_raster.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <xi:include href="function_create_gdal_raster_from_model.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <xi:include href="function_create_temp_gdal_raster.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <xi:include href="function_create_temp_gdal_raster_from_model.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <xi:include href="function_make_window.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <xi:include href="function_make_moving_window_view.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <xi:include href="function_make_zip_range.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude"/>
  </section>
</library>
